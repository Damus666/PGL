import pathlib
import pygame
import shutil
import json
import os


class PGLError(RuntimeError): ...


def start_app(do_print = True):
    from pgl import app

    if do_print:
        print("Starting PGL Application")
    app.main()
    if do_print:
        print("Program Finished")


def get_pref_paths():
    """
    Return the data path at Users/current user/AppData/Roaming/PGL/PGL+
    plus the userdata.json path and the default projects directory path
    """
    pref_path = pygame.system.get_pref_path("PGL", "PGL")
    if not os.path.exists(pref_path):
        os.makedirs(pref_path)

    projects_dir = f"{pref_path}projects"
    data_path = f"{pref_path}userdata.json"

    if not os.path.exists(projects_dir):
        os.mkdir(projects_dir)

    if not os.path.exists(data_path):
        with open(data_path, "w") as file:
            json.dump({"projects_dir": projects_dir}, file)

    return pref_path, data_path, projects_dir


def get_pgl_paths():
    """Return relevant paths of pgl like the python package path plus the runtime.py path and the prelude.pyi path"""
    pgl_path = os.path.dirname(__file__)
    return pgl_path, f"{pgl_path}\\runtime.py", f"{pgl_path}\\prelude.pyi"


def get_projects_dir(check_exists=True):
    """Return the projects directory saved in userdata.json"""
    pref_path, data_path, projects_dir = get_pref_paths()

    with open(data_path, "r") as file:
        data = json.load(file)
        projects_dir = data.get("projects_dir", projects_dir)

    if check_exists:
        if not os.path.exists(projects_dir):
            raise PGLError(
                f"Set projects directory '{projects_dir}' does not exist. Use the set_dir command to set a new one"
            )

    return projects_dir


def get_project_path(project_path):
    """Check if project_path exists and if it doesn't search it in the projects directory saved in userdata.json"""
    if not os.path.exists(project_path):
        projects_dir = get_projects_dir()
        new_path = f"{projects_dir}\\{project_path}"
        if not os.path.exists(new_path):
            raise PGLError(f"Nor '{project_path}' nor '{new_path}' exists")
        return new_path
    return project_path


def run_project(project_path, do_print=True):
    project_path = get_project_path(project_path)

    out_path = f"{project_path}\\out.py"
    if not os.path.exists(out_path):
        raise PGLError(f"Project '{project_path}' does not exist or was not compiled")

    if do_print:
        print("Running project")

    os.system(f'python "{out_path}"')
    if do_print:
        print("Program finished")


def build_project(project_path, do_print=True):
    project_path = get_project_path(project_path)
    pgl_path, runtime_path, prelude_path = get_pgl_paths()
    config_path, out_path = f"{project_path}\\config.json", f"{project_path}\\out.py"

    out_data = "# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT\n\n"
    with open(runtime_path, "r") as runtime_file:
        out_data += "# ----- ENGINE RUNTIME -----\n"
        out_data += runtime_file.read()
        out_data += "\n\n# ----- USER CODE -----\n\n"

    for dirpath, __, files in os.walk(project_path):
        for file_name in files:
            path = pathlib.Path(f"{dirpath}/{file_name}")
            if (
                path.suffix == ".py"
                and path.stem not in ["out", "prelude"]
                and not path.stem.startswith("ignore")
            ):
                with open(path, "r") as file:
                    file_data = file.read()
                    if "from prelude import *" not in file_data:
                        raise PGLError(
                            f"Script '{file_name}' does not contain 'from prelude import *' which is expected. If you typed it any differently, correct it"
                        )
                    file_data = file_data.replace("from prelude import *", "")
                    out_data += f"\n# SCRIPT {file_name}\n\n{file_data}"

    if not os.path.exists(config_path):
        raise PGLError("Could not find config.json in project")

    with open(config_path, "r") as config_file:
        config = json.load(config_file)
        config["project-path"] = project_path + "\\"
        out_data += f"\n# ----- GENERATED ENTRY POINT -----\nif __name__ == '__main__': _internal._main({config})\n"

    with open(out_path, "w") as out_file:
        out_file.write(out_data)

    try:
        os.system(f'ruff format "{out_path}"')
    except Exception:
        if do_print:
            print("Could not format out.py")

    if do_print:
        print("Successfully built project")


def create_project(project_name, do_print=True):
    if "\\" in project_name or "/" in project_name:
        raise PGLError("New project name should be a directory name, not a path")

    project_path = get_projects_dir() + f"\\{project_name}\\"
    pgl_path, runtime_path, prelude_path = get_pgl_paths()

    if os.path.exists(project_path) and len(os.listdir(project_path)) > 0:
        raise PGLError("Project already exists")

    if not os.path.exists(project_path):
        os.mkdir(project_path)
    os.mkdir(project_path + "assets")
    os.mkdir(project_path + "main")

    with open(project_path + "main/main.py", "w") as scene_file:
        scene_file.write(
            "from prelude import *\nimport typing\nif typing.TYPE_CHECKING:\n\t# import your files\n\t...\n\n\nclass Main(Scene):\n\tdef init(self):\n\t\t...\n\n\tdef update(self):\n\t\t...\n"
        )
    with open(project_path + "ruff.toml", "w") as toml_file:
        toml_file.write('lint.ignore = ["F403", "F405"]')
    with open(project_path + "config.json", "w") as config_file:
        config_file.write("""
{
    "window": {
        "title": "My Game",
        "size": "maximized"
    },
    "game": {
        "framerate-limit": "unlimited",
        "start-scene": "Main",
        "ambient-light": "0.15, 0.15, 0.15, 1"
    },
    "fonts": {
        "main": {
            "path": null,
            "bitmap-size": 200,
            "base-scale": 0.5,
            "bold": true
        }
    },
    "sounds": {
        
    },
    "binds": {
        "jump": {
            "main": ["K_SPACE"],
            "alts": [["BUTTON_LEFT", "mouse"], ["K_UP"]]
        },
        "print": ["K_p"]
    }
}""")
    shutil.copyfile(prelude_path, project_path + "prelude.pyi")

    if do_print:
        print("Successfully created project")


def set_directory(projects_dir_path, check_exists=True, do_print=True):
    """Set the projects directory in the userdata.json file"""
    pref_path, data_path, default_projects_dir = get_pref_paths()
    if projects_dir_path == "default":
        projects_dir_path = default_projects_dir

    if not os.path.isabs(projects_dir_path):
        projects_dir_path = os.path.abspath(projects_dir_path)

    if check_exists and not os.path.exists(projects_dir_path):
        raise PGLError(f"Cannot set projects dir '{projects_dir_path}' as it does not exist")

    with open(data_path, "w") as file:
        json.dump({"projects_dir": projects_dir_path}, file)

    if do_print:
        print(f"Successfully set the projects directory to '{projects_dir_path}'")

def list_projects(do_print = True):
    projects_dir = get_projects_dir(True)
    files =  [file for file in os.listdir(projects_dir) if os.path.isdir(projects_dir+"\\"+file)]
    if do_print:
        print(f"Existing projects: {','.join(files)}")
    return files
