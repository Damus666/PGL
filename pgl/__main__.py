import sys
import os
import pathlib
import shutil
import json


def build(project_name):
    PROJECT_PATH = f"projects/{project_name}/"
    OUT_PATH = f"{PROJECT_PATH}out.py"

    out_data = "# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT\n\n"
    with open("pgl/runtime.py", "r") as runtime_file:
        out_data += "# ----- ENGINE RUNTIME -----\n"
        out_data += runtime_file.read()
        out_data += "\n\n# ----- USER CODE -----\n\n"

    for dirpath, __, files in os.walk(PROJECT_PATH):
        for file_name in files:
            path = pathlib.Path(f"{dirpath}/{file_name}")
            if path.suffix == ".py" and path.stem not in ["out", "prelude"]:
                with open(path, "r") as file:
                    file_data = file.read()
                    if not "from prelude import *" in file_data:
                        print(f"Script {
                              file_name} does not contain 'from prelude import *' which is expected. If you typed it any differently, correct it")
                        return False
                    file_data = file_data.replace("from prelude import *", "")
                    out_data += f"\n# SCRIPT {file_name}\n\n{file_data}"

    if not os.path.exists(PROJECT_PATH+"config.json"):
        print("Could not find config.json in project")
        return False
    with open(PROJECT_PATH+"config.json", "r") as config_file:
        config = json.load(config_file)
        config["project-name"] = project_name
        out_data += f"\n# ----- GENERATED ENTRY POINT -----\nif __name__ == '__main__': _internal._main({
            config})\n"

    with open(OUT_PATH, "w") as out_file:
        out_file.write(out_data)
    try:
        os.system(f"black {OUT_PATH}")
    except:
        print("Could not format out.py")

    print("Project built successfully")
    return True


def run(project_name):
    print("Running project")
    if not os.path.exists(f"projects/{project_name}/out.py"):
        print("Project does not exist or was not compiled")
        return

    os.system(f"python projects/{project_name}/out.py")
    print("Program finished")


def create(project_name):
    PROJECT_PATH = f"projects/{project_name}/"
    if os.path.exists(PROJECT_PATH):
        print("Project already exists")
        return

    os.mkdir(PROJECT_PATH)
    os.mkdir(PROJECT_PATH+"assets")
    os.mkdir(PROJECT_PATH+"main")

    with open(PROJECT_PATH+"main/main.py", "w") as scene_file:
        scene_file.write("from prelude import *\nimport typing\nif typing.TYPE_CHECKING:\n\t# import your files\n\t...\n\n\nclass Main(Scene):\n\tdef init(self):\n\t\t...\n\n\tdef update(self):\n\t\t...\n")
    with open(PROJECT_PATH+"config.json", "w") as config_file:
        config_file.write("""
{
    "window": {
        "title": "My Game",
        "size": "maximized"
    },
    "game": {
        "framerate-limit": "unlimited",
        "start-scene": "Main",
        "ambient-light": "0.15, 0.15, 0.15, 1"
    },
    "fonts": {
        "main": {
            "path": null,
            "bitmap-size": 200,
            "base-scale": 0.5,
            "extra-chars": "òàèì",
            "bold": true
        }
    }
    "binds": {
        "jump": {
            "main": ["K_SPACE"],
            "alts": [["BUTTON_LEFT", "mouse"], ["K_UP"]]
        },
        "print": ["K_p"]
    }
}""")
    shutil.copyfile(f"engine/prelude.pyi", PROJECT_PATH+"prelude.pyi")

    print("Created project")


if __name__ == "__main__":
    if len(sys.argv) <= 0:
        print("Provide a project name and optional flags -new or -compile")
    project_name = sys.argv[1]
    if "-new" in sys.argv:
        create(project_name)
    elif "-compile" in sys.argv:
        build(project_name)
    else:
        built = build(project_name)
        if built:
            run(project_name)
